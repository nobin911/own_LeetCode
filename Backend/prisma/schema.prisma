// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  image         String?
  password      String
  role          UserRole        @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  Problems      Problem[]
  submission    Submission[]
  problemSolved ProblemSolved[]
  playlists     PlayList[]
}

model Problem {
  id                 String     @id @default(uuid())
  title              String
  description        String
  tags               String[] //["math","addition"]
  difficulty         Difficulty
  constraints        String
  userId             String
  examples           Json
  hints              String
  editorial          String
  testCases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @default(now())

  //RelationShip
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission       Submission[]
  solvedBy         ProblemSolved[]
  problemPlayLists ProblemInPlayList[]
}

model Submission {
  id            String  @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // relationship

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem   Problem          @relation(fields: [problemId], references: [id], onDelete: Cascade)
  testCases TestCaseResult[]
}

model TestCaseResult {
  id            String   @id @default(uuid())
  submissionId  String
  testCase      Int
  passed        Boolean
  stdout        String?
  expected      String?
  stderr        String?
  compileOutput String?
  status        String?
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  // relation
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model PlayList {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  //relation
  problems ProblemInPlayList[]
  user     User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) //unique playlist names per user
}

model ProblemInPlayList {
  id         String   @id @default(uuid())
  playListId String
  problemId  String
  createdAt  DateTime @default(now())
  upatedAt   DateTime @default(now())

  // relationship
  playlist PlayList @relation(fields: [id], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playListId, problemId])
}
